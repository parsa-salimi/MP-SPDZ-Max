# sint: secret integers

# you can assign public numbers to sint

a = sint(1)
b = sint(2)

def test(actual, expected):

    # you can reveal a number in order to print it

    actual = actual.reveal()
    print_ln('expected %s, got %s', expected, actual)

# private inputs are read from Player-Data/Input-P<i>-0
# or from standard input if using command-line option -I

a = Array(4,sint)
a1 = sint.get_input_from(0,size = 4)
a = Array.create_from(a1)
b = sint.Array(4)
b1 = sint.get_input_from(1,size = 4)
b = Array.create_from(b1)

print_ln('got %s from player %s',a.reveal(), 0)

print_ln('got %s from player %s',b.reveal(), 1)

# some arithmetic works as expected





def two_party_max_index(a,b):
    c1 = a + b
    c = Array(len(a),sint)
    c = Array.create_from(c1)
    test(c,1)
    z = Array(len(a), sint)
    index = Array(len(a),sint)
    index[0]=sint(0)
    max_value = Array(len(a), sint)
    max_value[0] = sint(0)
    @for_range(len(a))
    def f(i):
        #z[i] = c.get(i)
        max_value[i] = (max_value[i-1]<c.get(i)).if_else(c.get(i),max_value[i-1])
        index[i] = (max_value[i-1]<c.get(i)).if_else(i,index[i-1])
    return max_value[len(max_value)-1],index[len(index)-1]

max_value, index = two_party_max_index(a,b)


test(max_value,2)
test(index,2)

test(a + b, [1,1,2,1])
test(a * b, [0,0,1,0])
test(a[:] - b[:], [-1,1,0,-1])
#test(a.max(b),3)

# Division can mean different things in different domains
# and there has be a specified bit length in some,
# so we use int_div() for integer division.
# k-bit division requires (4k+1)-bit computation.

# test(b.int_div(a, 15), 2)

# comparisons produce 1 for true and 0 for false

#test(a < b, 1)
#test(a <= b, 1)
#test(a >= b, 0)
#test(a > b, 0)
#test(a == b, 0)
#test(a != b, 1)


