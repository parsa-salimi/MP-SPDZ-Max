# coding: latin-1
"""
  Solve Bankers bonus, aka Millionaires problem.
  to deduce the maximum value from a range of integer input.

  Demonstrate clients external to computing parties supplying input and receiving an authenticated result. See bankers-bonus-client.cpp for client (and setup instructions).
  
  Wait for MAX_NUM_CLIENTS to join the game or client finish flag to be sent
  before calculating the maximum.

  Note each client connects in a single thread and so is potentially blocked.
  
  Each round / game will reset and so this runs indefinitiely.
"""

from http import client
from Compiler.types import sint, regint, Array, MemValue
from Compiler.library import print_ln, do_while, for_range
from Compiler.util import bit_and, if_else

PORTNUM = 14000
MAX_NUM_CLIENTS = 8
n_rounds = 0
NUM_INPUTS = 6

if len(program.args) > 1:
    n_rounds = int(program.args[1])

def accept_client():
    client_socket_id = accept_client_connection(PORTNUM)
    last = regint.read_from_socket(client_socket_id)
    return client_socket_id, last

def close_connections(number_clients):
    @for_range(number_clients)
    def _(i):
        closeclientconnection(i)

def client_input(t, client_socket_id):
    """
    Send share of random value, receive input and deduce share.
    """
    x = t.receive_from_client(NUM_INPUTS, client_socket_id)
    # print_ln("Hi%s",x.reveal())
    return x

def two_party_max_index(number_clients, client_values, client_ids):
    """Work out and return client_id which corresponds to max client_value"""
    c1 = client_values[0] + client_values[1]
    c = Array(len(client_values[0]),sint)
    c = Array.create_from(c1)

    
    z = Array(len(client_values[0]), sint)
    index = Array(len(client_values[0]),sint)
    index[0]=sint(0)
    max_value = Array(len(client_values[0]), sint)
    max_value[0] = sint(0)
    @for_range(len(client_values[0]))
    def f(i):
        max_value[i] = (max_value[i-1]<c.get(i)).if_else(c.get(i),max_value[i-1])
        index[i] = (max_value[i-1]<c.get(i)).if_else(i,index[i-1])
    return max_value[len(max_value)-1],index[len(index)-1]

def n_party_max_index(number_clients, client_values, client_ids):
    """Work out and return client_id which corresponds to max client_value"""
    c1 = client_values[0]
    for i in range(1,len(client_values)):
        c1 = client_values[i]+c1
    c = Array(len(client_values[0]),sint)
    c = Array.create_from(c1)

    
    z = Array(len(client_values[0]), sint)
    index = Array(len(client_values[0]),sint)
    index[0]=sint(0)
    max_value = Array(len(client_values[0]), sint)
    max_value[0] = sint(0)
    @for_range(len(client_values[0]))
    def f(i):
        max_value[i] = (max_value[i-1]<c.get(i)).if_else(c.get(i),max_value[i-1])
        index[i] = (max_value[i-1]<c.get(i)).if_else(i,index[i-1])
    return max_value[len(max_value)-1],index[len(index)-1]

def find_min_for_binary_array(binary_array):
    """Work out and return client_id which corresponds to max client_value"""
    min_value = Array(1, binary_array.value_type)
    min_value[0] = binary_array[0]

    @for_range(len(binary_array)-1)
    def loop_body(i):
        # Is this client input a new maximum, will be sint(1) if true, else sint(0)
        is_new_max = min_value[0] > binary_array[i+1]
        # Keep latest max_value
        min_value[0] = if_else(is_new_max, binary_array[i+1], min_value[0])
        
    return min_value[0]

def check_binary_array(number_clients, client_values, client_ids):
    invalid_array = Array(len(client_values),sint)
    invalid_array = Array(len(client_values),sint)
    @for_range(len(client_values))
    def f(i):
        high_value = (client_values[i]<=sint(1)).if_else(sint(1),sint(0))
        low_value = (client_values[i]>=sint(0)).if_else(sint(1),sint(0))
        invalid_array[i] = high_value*low_value
    return invalid_array


def determine_winner(number_clients, client_values, client_ids):
    """Work out and return client_id which corresponds to max client_value"""
    
    return sint(0)


def write_winner_to_clients(sockets, number_clients, winning_client_id):
    """Send share of winning client id to all clients who joined game."""

    # Setup authenticate result using share of random.
    # client can validate ∑ winning_client_id * ∑ rnd_from_triple = ∑ auth_result
    sint.reveal_to_clients(sockets.get_sub(number_clients), [winning_client_id])

def write_valid_entries_to_clients(sockets, number_clients, valid_entries):
    """Send share of winning client id to all clients who joined game."""

    # Setup authenticate result using share of random.
    # client can validate ∑ winning_client_id * ∑ rnd_from_triple = ∑ auth_result
    sint.reveal_to_clients(sockets.get_sub(number_clients), [valid_entries])



def check_legitimate_entries(number_clients, client_values, client_ids):
    invalid_ids = Array(len(client_ids),sint)

    @for_range(len(client_ids))
    def f(i):
        invalid_id= check_binary_array(i,client_values[i],i)
        min = find_min_for_binary_array(invalid_id)
        invalid_ids[i] = min
    return invalid_ids


def main():
    """Listen in while loop for players to join a game.
    Once maxiumum reached or have notified that round finished, run comparison and return result."""
    # Start listening for client socket connections
    listen_for_clients(PORTNUM)
    print_ln('Listening for client connections on base port %s', PORTNUM)

    def game_loop(_=None):
        print_ln('Starting a new round of the game.')

        # Clients socket id (integer).
        client_sockets = Array(MAX_NUM_CLIENTS, regint)
        # Number of clients
        number_clients = MemValue(regint(0))
        # Client ids to identity client
        client_ids = Array(MAX_NUM_CLIENTS, sint)
        # Keep track of received inputs
        seen = Array(MAX_NUM_CLIENTS, regint)
        seen.assign_all(0)

        # Loop round waiting for each client to connect
        @do_while
        def client_connections():
            client_id, last = accept_client()
            @if_(client_id >= MAX_NUM_CLIENTS)
            def _():
                print_ln('client id too high')
                crash()
            client_sockets[client_id] = client_id
            client_ids[client_id] = client_id
            seen[client_id] = 1
            @if_(last == 1)
            def _():
                number_clients.write(client_id + 1)

            return (sum(seen) < number_clients) + (number_clients == 0)

        def type_run(t):
            # Clients secret input.
            client_values = MultiArray((MAX_NUM_CLIENTS,NUM_INPUTS),t)

            @for_range(number_clients)
            def _(client_id):
                client_values[client_id] = client_input(t, client_id)
            # @for_range(number_clients)
            # def _(client_id):
            #     client_values[client_id] = client_input(t, client_id)
            
            max, index = n_party_max_index(number_clients, client_values,
                                                 client_ids)
            valid_entries = check_legitimate_entries(number_clients, client_values,
                                                 client_ids)
            @for_range(number_clients)
            def _(client_id): 
                print_ln('Validity of particiapants by ID: %s',valid_entries[client_id].reveal())
                write_valid_entries_to_clients(client_sockets, number_clients,
                                        valid_entries[client_id])


            print_ln('Meeting time, index: %s.', index.reveal())
            print_ln('Number of Participants who can make the meeting, max: %s.', max.reveal())

            write_winner_to_clients(client_sockets, number_clients,
                                    index)
            write_winner_to_clients(client_sockets, number_clients,
                                    max )
                

        type_run(sint)
        # type_run(sfix)

        close_connections(number_clients)

        return True

    if n_rounds > 0:
        print('run %d rounds' % n_rounds)
        for_range(n_rounds)(game_loop)
    else:
        print('run forever')
        do_while(game_loop)

main()
